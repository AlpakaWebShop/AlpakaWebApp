@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage sessionStorage
@using System.Net.Http.Json
@using AlpakaFrontend2.EntityFrameworkModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
<div>
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="username">Username</label>
            <input id="username" type="text" @bind="loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input id="password" type="password" @bind="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
</div>
</body>
</html>

@code {
    private LoginModel loginModel = new LoginModel();
    private string message;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://usersrest.azurewebsites.net/api/Authenticate/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (tokenResponse?.Token != null)
                {
                    await sessionStorage.SetAsync("authToken", tokenResponse.Token);

                    // Extract role from JWT
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadToken(tokenResponse.Token) as JwtSecurityToken;
                    var roleClaim = jwtSecurityToken.Claims.FirstOrDefault(claim => claim.Type.Contains("role"));

                    if (roleClaim != null && roleClaim.Value.Equals("Admin"))
                    {
                        NavigationManager.NavigateTo("/CreateAlpakaEvent", forceLoad: true);
                    }
                    else
                    {
                        NavigationManager.NavigateTo("/Alpakas", forceLoad: true);
                    }
                }
                else
                {
                    message = "Invalid login response.";
                }
            }
            else
            {
                message = "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            message = "An error occurred during login.";
        }
    }

    private class TokenResponse
    {
        public string Token { get; set; }
        public string Expiration { get; set; } // Added to match your JSON response
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "User Name is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}